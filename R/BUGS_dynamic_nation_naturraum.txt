
  model{

  # State model

  for (i in 1:nsite){ 
    
    #first year/initial occupancy, model

    #data distribution
    z[i,1] ~ dbern(muZ[i,1])
    
    logit(muZ[i,1]) <- logit.mu + raum.a[raumS[i]]

  
    for (t in 2:nyear){
      
      #data distribution
      z[i,t] ~ dbern(muZ[i,t]) 

      #overall model
      muZ[i,t] <- persist[i,t]*muZ[i,t-1] + colonize[i,t]*(1-muZ[i,t-1])
      
      #persistence occupancy model
      logit(persist[i,t]) <- muphi[t] + lphi[raumS[i]]
      #lphi.mtb[mtbS[i]]

      #colonization occupancy model
      logit(colonize[i,t]) <- mugam[t] + lgam[raumS[i]] 
      #lgam.mtb[mtbS[i]]
    }
  }   
 
  ### Observation Model
  for(j in 1:nvisit) {
    y[j] ~ dbern(Py[j]) #data is Y
    Py[j]<- z[site[j],year[j]]*p[j] 

    #detection model:
    logit(p[j]) <-  mup[year[j]] +
                    lp[raum[j]] +
                    mu.phenol * yday[j] + 
                    mu.phenol2 * pow(yday[j], 2) +
                    phenol.s[raum[j]] * yday[j] + 
                    phenol2.s[raum[j]] * pow(yday[j],2)+
                    effort.p * Effort[j] +
                    single.p * singleList[j]
    } 
  
  # Derived parameters

  #metapopulation-level
   for(t in 1:nyear){
      psi.fs[t] <- sum(z[,t])/nsite
    }
    
  #yearly-growth
  e <- 0.0000001
  for(t in 1:(nyear-1)){  
    growthr[t] <- ((psi.fs[t+1]+e)/(1-psi.fs[t+1]+e))/((psi.fs[t]+e)/(1-psi.fs[t]+e))
  } 

  #overall
    mean.growth <- mean(growthr)
    mean.p <- mean(p)#mean detection probability

  #state-level
  for(r in 1:nraum){
      psi.raum[r,1] <- logit.mu + raum.a[r]
    for(t in 2:nyear){
      psi.raum[r,t] <- persist.R[r,t]*psi.raum[r,t-1] + colonize.R[r,t]*(1-psi.raum[r,t-1])
      logit(persist.R[r,t]) <- muphi[t] + lphi[r]
      logit(colonize.R[r,t]) <- mugam[t] + lgam[r]
    }
  }

  #yearly state-level growth
  for(r in 1:nraum){
    for(t in 1:(nyear-1)){  
      raum.growthr[r,t] <- ((psi.raum[r,t+1]+e)/(1-psi.raum[r,t+1]+e))/((psi.raum[r,t]+e)/(1-psi.raum[r,t]+e)) 
    } 
  }

  #state growth
  for(r in 1:nraum){
    raum.mean.growth[r] <- mean(raum.growthr[r,])
  }

  #Priors 

  # State model priors
  
  #spatial effects

    #intercept
    mu ~ dunif(0,1)
    logit.mu <- logit(mu)

    #state.a random effects
    for (s in 1:nraum) {
      raum.a[s] ~ dnorm(0, tau.raum.a)       
    } 
    tau.raum.a ~ dgamma(.1,.1) 

    #mtbq random effects
    for (s in 1:nsite) {
      site.a[s] ~ dnorm(0, tau.site.a)       
    } 
    tau.site.a ~ dgamma(.1,.1) 

    #mtb effects
    for (s in 1:nmtb) {
      site.mtb[s] ~ dnorm(0, tau.mtb.a)       
    } 
    tau.mtb.a ~ dgamma(.1,.1)

  #temporal intercepts
    
    #detection model 
    for(i in 1:nyear){
      mup.prob[i] ~ dunif(0,1)
      mup[i] <- logit(mup.prob[i])
    }

    #persist/colon
    for(i in 2:nyear){
      muphi.prob[i] ~ dunif(0,1)
      muphi[i] <- logit(muphi.prob[i])
      
      mugam.prob[i] ~ dunif(0,1)
      mugam[i] <- logit(mugam.prob[i])
    }
    
    
  #random state variation

    tau.phi ~ dgamma(.1,.1)
    tau.gam ~ dgamma(.1,.1)
    taup ~ dgamma(.1,.1)
  
    for(s in 1:nraum){
      lphi[s] ~ dnorm(0,tau.phi)
      lgam[s]  ~ dnorm(0,tau.gam)
      lp[s]  ~ dnorm(0,taup)
    }

  #random site variation
    tau.site.phi ~ dgamma(.1,.1)
    tau.site.gam ~ dgamma(.1,.1)
    taup.site ~ dgamma(.1,.1)
    
    for(s in 1:nsite){
      lphi.site[s] ~ dnorm(0,tau.site.phi)
      lgam.site[s]  ~ dnorm(0,tau.site.gam)
      lp.site[s]  ~ dnorm(0,taup.site)
    }

   #random mtb variation
    tau.mtb.phi ~ dgamma(.1,.1)
    tau.mtb.gam ~ dgamma(.1,.1)
    taup.mtb ~ dgamma(.1,.1)
    
   for(s in 1:nmtb){
      lphi.mtb[s] ~ dnorm(0,tau.mtb.phi)
      lgam.mtb[s]  ~ dnorm(0,tau.mtb.gam)
      lp.mtb[s]  ~ dnorm(0,taup.mtb)
    }

    #Observation model priors
    #intercept - see above
    #site-level variaion - see above

    #effort effects
    effort.p ~ dnorm(0, 0.01)
    single.p ~ dnorm(0, 0.01)

    #random slopes for phenology
    for(r in 1:nraum){
      phenol.s[r] ~ dnorm(0, tau.phenol)
      phenol2.s[r] ~ dnorm(0, tau.phenol2)
    }
    mu.phenol ~ dnorm(0,0.01)
    mu.phenol2 ~ dnorm(0,0.01)
    tau.phenol ~ dgamma(.1,.1)
    tau.phenol2 ~ dgamma(.1,.1)    
    
  }
    
