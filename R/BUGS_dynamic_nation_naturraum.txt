
  model{
    
    # State model
    
    for (i in 1:nsite){ 
    
    #for first year
    z[i,1] ~ dbern(psi1[i])
    
    logit(psi1[i]) <- mu.a + r.a[mraumS[i]] + cr.a[craumS[i]] 
    
    for (t in 2:nyear){
    
    #data distribution
    z[i,t] ~ dbern(muZ[i,t]) 
    
    #overall model
      muZ[i,t] <- persist[i,t-1]*z[i,t-1] + colonize[i,t-1]*(1-z[i,t-1])
    
    #persistence occupancy model
      logit(persist[i,t-1]) <- phi[t-1]  
    
    #colonization occupancy model
      logit(colonize[i,t-1]) <- gam[t-1] 
      }
    }   
    
    ### Observation Model
    for(j in 1:nvisit) {
    
    y[j] ~ dbern(Py[j]) #data is Y 
    Py[j]<- z[site[j],year[j]]*p[j] 
    
    #detection model:
    logit(p[j]) <-  mup[year[j]] + 
                    mu.phenol * yday[j] + 
                    mu.phenol2 * yday2[j]+
                    effort.p * Effort[j] +
                    single.p * singleList[j]
                    
    #Create simulated dataset to calculate the Bayesian p-value
    y.sim[j] ~ dbern(Py[j]) #data is Y 
                    
    } 
    
    # Derived parameters
    
    #metapopulation-level
    for(t in 1:nyear){  
      psi.fs[t] <- sum(z[1:nsite,t])/nsite  
    } 

    # overall trend in occpuancy
    sumY <- sum(psi.fs[1:nyear])
    for (t in 1:nyear) {
      sumxy[t] <- psi.fs[t]*t
    }
    sumXY <- sum(sumxy[1:nyear])
    regres.psi <- (sumXY - ((sumX*sumY)/nyear))/(sumX2 - ((sumX*sumX)/nyear))#trend

    
    #detection probability
    mean.p <- mean(p)
  
    #get mean detection probability each year
      for(t in 1:nyear){
        for(j in 1:nvisit){
          exp.idx[j,t] <- Py[j] * StrIdx[j,t]     
          temp[j,t] <- y.sim[j] * StrIdx[j,t]
          p.idx[j,t] <- p[j] * StrIdx[j,t]     
        }
        
        e.count[t] <- sum(exp.idx[,t])
        predDets[t] <- sum(temp[,t])
        annual.p[t] <- sum(p.idx[,t])/annualVisits[t]
      }
    
    e <- 0.0001# Add small value e to denominator to avoid division by zero
    
    for(t in 1:nyear){
    
    # Chi-square discrepancy for the actual data
    chi2.actual[t] <- pow((obsDets[t]-e.count[t]),2) / (e.count[t]+e)
    
    # Chi-square discrepancy for the simulated ('perfect') data
    chi2.sim[t] <- pow((predDets[t]-e.count[t]),2) / (e.count[t]+e)
    
    }
    
    # Add up individual chi2 values for overall fit statistic
    fit.actual <- sum(chi2.actual)  # Fit statistic for actual data set
    fit.sim <- sum(chi2.sim)        # Fit statistic for a fitting model
    bpv <- step(fit.sim-fit.actual)    # Bayesian p-value
    
    #Priors 
    
    # State model priors
    
    #year
    
    #year 1
    mu.a ~ dnorm(0, 0.001)
    
    #cr.a random effects for coarse naturraum
    for (s in 1:ncraum) {
      cr.a[s] ~ dnorm(0, tau.cr.a)       
    } 
    tau.cr.a <- 1/(sd.cr.a * sd.cr.a)
    sd.cr.a ~ dt(0, 1, 1)T(0,) 
    
    #r.a random effects for naturraum
    for (s in 1:nmraum) {
      r.a[s] ~ dnorm(0, tau.r.a)       
    } 
    tau.r.a <- 1/(sd.r.a * sd.r.a)
    sd.r.a ~ dt(0, 1, 1)T(0,) 
    
    
    #change priors - fixed effects
    for (t in 1:(nyear-1)) {
      phi[t] ~ dnorm(0,0.001)       
    } 
    
    #r.a random effects for naturraum
    for (t in 1:(nyear-1)) {
      gam[t] ~ dnorm(0,0.001)       
    } 
    
    #####################################################
    
    #Observation model priors

    #year
    for(t in 1:nyear){
      mup[t] ~ dnorm(mu.p, tau.ap)
    }
    mu.p ~ dnorm(0, 0.001)
    tau.ap <- 1/(sd.ap * sd.ap)
    sd.ap ~ dt(0, 1, 1)T(0,)  
    
    #effort effects
    effort.p ~ dnorm(0, 0.001)
    single.p ~ dnorm(0, 0.001)
    
    #phenology effects
    mu.phenol ~ dnorm(0,0.001)
    mu.phenol2 ~ dnorm(0,0.001)
    
  }
    
